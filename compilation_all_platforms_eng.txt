********************************************
*         COMPILATION WITH CMAKE           *
*                                          *
*    Last modification: 07/02/2012 (DGM)   *
*                                          *
********************************************

Refer to the wiki (http://www.danielgm.net/cc/doc/wiki/index.php5?title=Compilation_CMake) for up-to-date information.

WARNING: if you already have an old CloudCompare local repository (pior to April 2012)
         erase it and check a new one out before doing anything!

0) Prerequisites

	- Checkout the sources from the SVN server:
		server: https://fp6perfect.edf-labs.net/svn/CloudCompare/trunk
		login/password: invite_cc/invite_cc
	- Install CMake (2.8 or newer)
	- Install all necessary dependencies:
		- [WINDOWS] Qt (version 4.7 or newer)
		- [LINUX] qt-dev, opengl

1) Generating the project
	- Launch CMake (GUI)
	- Make the 'Where is the source code' field point to your local CloudCompare SVN repository.
	- Make the 'Where to build the binaries' field point to ... almost anywhere you want (apart from the same folder as above!)
	- Click on the "Configure" button
	- Select your generator [already tested: Visual 2008 (32 & 64 bits), Visual 2010 Express (64 bits - see appendix), Code::Blocks (Linux & Windows 32 bits), gcc (Linux 32 & 64 bits)]
	- Wait for CMake configuration/tests to finish...

2) Before clicking on the 'Generate' button, you may set some options:
	- if you expand the "OPTION" group, you'll be able to set some general options:
		- OPTION_BUILD_CC_VIEWER: whether to build or not the ccViewer side project (activated by default)
		- OPTION_MP_BUILD: for MSVC only (mutli-process build --> much faster, but takes almost all available CPU)
		- OPTION_USE_ULT: to be ignored
		- OPTION_USE_LIBE57: to activate support for E57 files in qCC (and ccViewer) with libE57- see below
		- OPTION_USE_LIBLAS: to activate support for LAS files in qCC (and ccViewer) with libLAS - see below
		- OPTION_USE_XIOT: to activate support for X3D files in qCC (and ccViewer) with XIOT - see below
	- if you expand the "INSTALL" group, you'll be able to select which [plugin(s)|Plugins] you want to compile (by default, none are selected)
		- qDummy (warning: does nothing, template for developers)
		- qEDL
		- qHPR
		- qKinect (only tested on Windows for the moment) - see below
		- qPCL (requires PCL - see below)
		- qPCV
		- qPoissonRecon
		- qSSAO
	- eventually, the "CMAKE" group contains a CMAKE_INSTALL_PREFIX which is where qCC (CloudCompare) and ccViewer will be installed (with the 'install' build configuration in your project)
		Note: On Linux, default install dir is /usr/local (be sure to have administrative rights if you want to install CloudCompare there - or change the default path)
		      On Windows Seven, you may not have the right to 'install' files in Program Files (x86)


2-1) [Optional] Setup for LibLAS support

If you want to compile CloudCompare (and ccViewer) with LAS files support, you'll need:
	- LibLAS (last tested version: 1.7 on Windows)
	- Boost multi-thread shared libraries
		* make the BOOST_ROOT environment variable point to your Boost installation before launching CMake in order for the automatic 'find_package' script to work properly
		* otherwise refer to LibLAS documentation for more directions

Then, the CloudCompare CMake project will request that you set the 3 following variables:
	- LIBLAS_INCLUDE_DIR: LibLAS include directory (pretty straightforward ;)
	- LIBLAS_RELEASE_LIBRARY_FILE: main LibLAS release library (the .lib or .a file itself!)
	- [Windows] LIBLAS_SHARED_LIBRARY_FILE: full path to the liblas.dll file

Note: For the moment, only the release version of CloudCompare supports LibLAS files

2-2) [Optional] Setup for LibE57 support

If you want to compile CloudCompare (and ccViewer) with LibE57 files support, you'll need:
	- LibE57 (last tested version: 1.0.224 on Windows)
	- Boost multi-thread static libraries (same as libLAS)
	- Xerces-C++ multi-thread static libraries
		* only the XercesLib project must be compiled
		* eventually, CMake will look for the resulting files in '/include' (instead of /src)
		  and /lib (instead of /Build/Win32/VCX/Static Debug or Release)

WARNING: on Microsoft Visual (at least), you'll need the libraries compiled with /MD (=DLL Multithreaded)
         in release mode and /MDd in debug mode. You may have to change this in both Xerces (change
		 XercesLib project's options 'C/C++ > Code Generation > Runtime Library') as well as in libE57
		 root CMake file (replace all '/MT' by '/MD' in it)

The CloudCompare CMake project will only require that you set the path where libE57 has been installed (LIBE57_INSTALL_DIR)

2-3) [Optional] Setup for libfreenect support

If you want to compile qKinect you'll need:
	- OpenKinect / libfreenect (last tested version: trunk @ 03/22/2012, compiled on Windows XP 32 & 64bits)

Then, the CloudCompare CMake project will request that you set the 3 following variables:
	- LIBFREENECT_INCLUDE_DIR: libfreenect include directory (pretty straightforward ;)
	- LIBFREENECT_LIBRARY_FILE: main libfreenect library (the freenect.lib or libfreenect.a file itself!)
	- [Windows] LIBFREENECT_SHARED_LIBRARY_FILE: full path to the freenect.dll file

2-4) [Optional] Setup for XIOT support

NOT READY YET

If you want to compile CloudCompare (and ccViewer) with LAS files support, you'll need:
	- XIOT (last tested version: 0.9.patched in trunk/contrib - on Windows)
		* XIOT CMake makefile has been patched to let the user set its own version of Xerces and zlib!
		
Then, the CloudCompare CMake project will request that you set the following variable:
	- XIOT_INSTALL_DIR: XIOT install directory (once CMAKE has run, and project "INSTALL" configuration properly run/compiled as well)

2-4) [Optional] Setup for PCL support

If you want to compile qPCL you'll need:
	- PCL (http://pointclouds.org/ - last tested version: 1.5.1 on Windows 32 & 64 bits)

Follow the online instructions/tutorials. Basically, you'll need Boost, Qt, Flann and Eigen.

Once properly installed, the CloudCompare CMake script should automatically find PCL definitions.
However, you'll have to set again the parameters related to Flann and Eigen.	

3) Generate the project files

- Click multiple times on 'Configure' (and correct any error if necessary) until all red items have disappeared.
- Click on the 'Generate' button to create the corresponding project files

4) Compiling the project

- Open the resulting project with the generator you have previously chosen (the file(s) should be where you told CMake to build the binaries).
- You should (always?) found the two following configuration/sub-projects:
	- 'build all' should do all the compilation work (in the right order) but the binaries and libraries will be generated (by default) among all the other compilation files, in a somewhat complicated folder tree structure.
	- 'install' should export all these files to the CMAKE_INSTALL_PREFIX folder, placing everything where it should be (and almost exactly as the official binary build)

On Linux, you may encounter issues with shared libraries (.so files). In this case, set the LD_LIBRARY_PATH variable so that it points to the qCC and ccViewer installation folders (export LD_LIBRARY_PATH=...).

Appendix

A0) Compiling the 64 bits version on Windows

Here are several "hints" regarding the compilation on Windows 64 bits:
* if only Visual 2010 Express is installed, Cmake will require you to install Microsoft Windows SDK 7.1 (quite redundant?!)
* to compile with Visual 2010 on a 64 bits architecture you must then apply the following patch: http://support.microsoft.com/kb/2280741
  (this solves a bug from the MSVC 2010 compiler that prevents Qt from running correctly in release mode)
* you'll also have to compile Qt yourself, as Nokia doesn't provide the corresponding binaries:
	- download and decompress the Qt sources
	- start the Microsoft Windows SDK 7.1 command line mode with the dedicated shortcut
	  (you'll have to add "/Release" at the end of the shortcut - edit the shortcut properties for that).
	  Something like: << C:\Windows\System32\cmd.exe /E:ON /V:ON /T:0E /K "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /Release >>
	- if you don't have perl installed, just delete the "bin/syncqt.bat" file
	- follow the instruction to compile Qt (rather easy --> configure, nmake, then nmake install --> just wait for a few hours ;)
