
import os
import sys
import subprocess
import shutil
import json

rootdir= "/Users/paul/projets/CloudCompare"
installPath = "@CMAKE_INSTALL_PREFIX@"      # "/Users/paul/projets/CloudCompare/installConda/CloudComPy310"
condaPath = "@CONDA_LIBS@"                  # "/Users/paul/miniconda3/envs/CloudComPy310/lib"
fbxPath = "@FBX_SDK_LIBRARY_DIR@"           # "/Applications/Autodesk/FBX SDK/2020.2.1/lib/clang/release"
mainprg = installPath + "/CloudCompare/CloudCompare.app/Contents/MacOS/CloudCompare"
CloudCompareApp = installPath + "/CloudCompare/CloudCompare.app"
mainprg =                CloudCompareApp + "/Contents/MacOS/CloudCompare"
frameworkspath =         CloudCompareApp + '/Contents/Frameworks'
pluginpath =             CloudCompareApp + '/Contents/PlugIns'
embeddedPythonRootPath = CloudCompareApp + "/Contents/Resources/python"
condaPython = "@CONDA_PYTHON_BIN@/python"          # "/Users/paul/miniconda3/envs/Bundled310/bin/python"
condaPythonLibs = "@CONDA_PYTHON_LIBS@/python3.10" # "/Users/paul/miniconda3/envs/Bundled310/lib/python3.10"

dependancies = {} # dictionary of lib dependancies : key depends on (list of libs) (not recursive)

def getlibs(mainlib):
    """
    constitution de la liste des librairies dont dépend directement mainlib avec otool -L
    on ajoute celles en @rpath ou @executable_path
      @rpath designe le ou les chemins du framework (ou on range les libs)
      @executable_path designe le chemin du framework (librairies) relativement à l'executable principal de l'app
    on ne tient pas compte de celles avec un chemin absolu
    on trace seulement les chemins absolus ne commençant pas par /usr ou /System, pour le debug
    complete le dictionnaire de dépendances et renvoie libs, libex
    - libs: les lib en @rpath ou @executable_path
    - libex: les lib en @executable_path
    """
    libs = []
    libs2 = []
    libex = []
    with subprocess.Popen(['otool', '-L', mainlib], stdout=subprocess.PIPE) as proc:
        lines = proc.stdout.readlines()
        for l in lines:
            res = l.decode()
            #print("   ", res.strip())
            vals = l.split()
            if len(vals) < 2:
                continue
            pathlib = vals[0].decode()
            #print("     ", pathlib)
            dirs = pathlib.split("/")
            if dirs[0] == '@rpath':
                libs.append(dirs[1])
            elif dirs[0] == '@executable_path':
                libs.append(dirs[1])
                print("mainlib: ", mainlib, " target: ", dirs[1])
                libex.append((os.path.basename(mainlib), dirs[1]))
                libs2.append(dirs[1])
            elif dirs[1] == 'opt':
                libs.append(pathlib)
                print("mainlib: ", mainlib, "lib from /opt", pathlib)
            elif (len(dirs) >3) and (dirs[3] == 'miniconda3'):
                libs.append(pathlib)
                print("mainlib: ", mainlib, "lib from conda with absolute path", pathlib)
            else:
                if (dirs[1] != 'usr') and (dirs[1] != 'System'):
                    print("mainlib: ", mainlib, dirs)

        dependancies[os.path.basename(mainlib)] = libs + libs2
    return libs, libex

def getrpath(mainlib):
    '''
    recupère des path relatifs sous la forme @rpath/xxx, @loader_path/xxx, @executable_path/xxx, ou des path absolus
      @rpath designe le ou les chemins du framework (ou on range les libs): pas présent en pratique avec otool -l
      @loader_path designe le chemin du framework relatif à cet objet, ex: @loader_path/../lib
      @executable_path designe le chemin du framework relativement à l'executable de l'app, ex: @executable_path/../Frameworks
    return:
      rpath list
    '''
    rpaths = []
    with subprocess.Popen(['otool', '-l', mainlib], stdout=subprocess.PIPE) as proc:
        lines = proc.stdout.readlines()
        for l in lines:
            res = l.decode()
            #print("   ", res.strip())
            vals = res.split()
            #print(vals)
            if len(vals) > 1 and vals[0] == 'path':
                rpaths.append(vals[1])
    return rpaths

def convertRpaths(lib, rpaths):
    """
    remplace les path relatifs par des path absolus, en utilisant le repertoire absolu de la lib 
    A REVOIR : differents cas où on a deplacé la lib...
    """
    libpath = os.path.dirname(lib)
    #libpath.replace(embeddedPythonLibs, condaPythonLibs)       #  repertoire site package copié de conda
    absrpaths = []
    for rpath in rpaths:
        if "@loader_path" in rpath:
            vals = rpath.split('/')
            absrp = libpath
            if len(vals) > 1:
                for val in vals[1:]:
                    absrp = os.path.abspath(os.path.join(absrp, val))
            #print(absrp)
        else:
            absrp = os.path.abspath(rpath)
        absrpaths.append(absrp)
    return absrpaths

def buildPython(srcdir, builddir, installdir):
    """
    srcdir:  /Users/paul/projets/CloudCompare/Python-3.10.13
    builddir: /Users/paul/projets/CloudCompare/buildPython
    installdir: embeddedPythonRootPath
    """
    #subprocess.run(["rm", "-rf", builddir])
    os.makedirs(builddir)

    subprocess.run(["../Python-3.10.13/configure", 
                    "--prefix="+installdir, 
                    "--exec-prefix="+installdir, 
                    "--enable-optimizations"],
                   cwd=builddir)
    subprocess.run(["make", "-j12"],
                   cwd=builddir)
    subprocess.run(["make", "install"],
                   cwd=builddir)

scriptGenPython="""#!/bin/zsh

# --- environnement non transmis ?
echo "HOME:" ${HOME}
echo "CONDA_PREFIX:" ${CONDA_PREFIX}
#export CONDA_ROOT=/Users/paul/miniconda3
#. ${CONDA_ROOT}/etc/profile.d/conda.sh
#conda deactivate

cd /Users/paul/projets/CloudCompare
#tar xvzf Python-3.10.13.tgz
installPython=$1
echo "installPython:" $installPython
rm -rf buildPython 
mkdir buildPython
cd buildPython
../Python-3.10.13/configure \
  --prefix=$installPython \
  --exec-prefix=$installPython \
  --enable-optimizations
make -j12 && make install

export PATH=$installPython/bin:$PATH
pip3 install numpy
"""
    
def genPythonScript(workdir):
    """
    workdir: /Users/paul/projets/CloudCompare
    """
    with open(os.path.abspath(os.path.join(workdir, "genPython.sh")), 'w', encoding="utf-8") as f:
        f.write(scriptGenPython)
    os.chmod(os.path.join(workdir, "genPython.sh"), 0o755)    
    print("=================== genPythonScript start =============================")
    subprocess.run(["./genPython.sh", embeddedPythonRootPath], cwd=workdir)
    print("=================== genPythonScript end   =============================")


mainpath = os.path.dirname(mainprg)                            # .app/Contents/MacOS/CloudCompare
absFrameworksPath = os.path.abspath(frameworkspath)
print(" --- Frameworks path: ", absFrameworksPath)             # .app/Contents/Framework
absPluginPath = os.path.abspath(pluginpath)
print(" --- plugin path: ", absPluginPath)                     # .app/Contents/PlugIns
embeddedPythonPath = os.path.abspath(os.path.join(embeddedPythonRootPath, "bin"))
print(" --- embeddedPythonPath: ", embeddedPythonPath)         # .app/Contents/Resources/python/bin
embeddedPython = os.path.abspath(os.path.join(embeddedPythonPath, "python"))
print(" --- embeddedPython: ", embeddedPython)                 # .app/Contents/Resources/python/bin/python
embeddedPythonLibPath = os.path.abspath(os.path.join(embeddedPythonRootPath, "lib"))
print(" --- embeddedPythonLibPath: ", embeddedPythonLibPath)   # .app/Contents/Resources/python/lib
embeddedPythonLibs = os.path.abspath(os.path.join(embeddedPythonLibPath, "python3.10"))
print(" --- embeddedPythonLibs: ", embeddedPythonLibs)         # .app/Contents/Resources/python/lib/python3.10
embeddedPythonSiteLibs = os.path.abspath(os.path.join(embeddedPythonLibs, "site-packages"))
print(" --- embeddedPythonSiteLibs: ", embeddedPythonSiteLibs) # .app/Contents/Resources/python/lib/python3.10/site-package

print("isGenPython:", "@PLUGIN_PYTHON@")
isGenPython = "@PLUGIN_PYTHON@"
isCopyPythonFromConda=True
if isGenPython == "ON":
    if isCopyPythonFromConda:
        pythonFrameworks = absFrameworksPath
        os.makedirs(embeddedPythonPath)
        os.makedirs(embeddedPythonLibPath)
        shutil.copytree(condaPythonLibs, embeddedPythonLibs)
        shutil.copy2(condaPython, embeddedPython)
    else:    
        genPythonScript(rootdir)
        pythonFrameworks = absFrameworksPath
        shutil.move(embeddedPython+'3.10', embeddedPython)
        os.symlink(embeddedPython, embeddedPython+'3.10')
    
    print("=================== Python app begin =============================")
    # --- python: recherche des dependances de librairies 
    libsToCheck = [embeddedPython]                  # on amorce la recherche recusive de dépendances avec les executables
    libsfound = []
    libexfound = []
    PythonLibs = []
    
    # --- inventaire des librairies dans lib/python3.10 pour la recherche de dépendances et constitution d'une liste
    for root, dirs, files in os.walk(embeddedPythonLibs):
        for name in files:
            ext = os.path.splitext(name)[1]
            if ext == '.dylib' or ext == '.so':
                f = os.path.join(embeddedPythonLibs, root, name)
                #print("fp:",f)
                libsToCheck.append(f)
                PythonLibs.append(f)
    print("number of libs (.so and .dylib) in embedded Python: ", len(PythonLibs))
                
    # --- parcours pour la recherche de dépendances
    
    while len(libsToCheck):
        
        # --- on dépile une lib et on regarde si on l'a déjà traitée
        lib2check = libsToCheck.pop(0)        # on sort la lib de la liste à tester
        if not lib2check in libsfound:        
            libsfound.append(lib2check)       # ajout des nouvelles lib à la liste de lib trouvées
        else:
            continue                          # lib déjà traitée
        
        # --- recherche des dépendances en @rpath et @executable_path
        libs, libex = getlibs(lib2check)
        #print("lib2check: ", lib2check, " libs:", libs, " libex:", libex)
        for maintar in libex:
            if not maintar in libexfound:
                libexfound.append(maintar)            # ajout des dependances en @executable_path dans une liste séparée
    
        rpaths = getrpath(lib2check)                  # on récupere la liste des rpath utilisée par la lib
        #print("   rpaths:", rpaths)
    
        absrpaths = convertRpaths(lib2check, rpaths)  # on convertit les rpath relatifs en absolus
        if not condaPath in absrpaths:                # on a recopié des libs python (site-packages)
            absrpaths.append(condaPath)
        #print("   absrpaths:", absrpaths)
        
        for lib in libs:                              # parcours des lib en dependance rpath
            #print("    --- lib:", lib)
            if lib[0] == '/':
                if not lib in libsToCheck and not lib in libsfound:
                    libsToCheck.append(lib)      # si c'est une nouvelle lib, on l'ajoute à la liste à traiter
            else:    
                for absrp in absrpaths:                   # on parcourt les repertoires rpath pour trouver si la lib existe
                    alib = os.path.join(absrp, lib)
                    if os.path.isfile(alib):
                        #print("      exist:",alib)
                        if not alib in libsToCheck and not alib in libsfound:
                            libsToCheck.append(alib)      # si c'est une nouvelle lib, on l'ajoute à la liste à traiter
                        break        
    
    # --- recopie des librairies identifiées comme dépendance dans le framework, si elles ne sont pas déjà présentes dans le bundle
    print("libexfound to add to Frameworks: ",libexfound)
    libsfound.sort()             
    print("libsfound to add to Frameworks: ", len(libsfound))
    libsInFrameworks = os.listdir(pythonFrameworks)
    
    nbPythonLibsAddedToFrameworks = 0
    for lib in libsfound:
        if lib == embeddedPython:
            continue
        base = os.path.basename(lib)
        if base not in libsInFrameworks and lib not in PythonLibs:
            #print("copy:",lib)
            shutil.copy2(lib, pythonFrameworks)
            nbPythonLibsAddedToFrameworks +=1
    print("libs added to Frameworks: ", nbPythonLibsAddedToFrameworks)
    
    # # --- ajout des rpath pour les librairies du framework : framework
    # for filename in os.listdir(pythonFrameworks):
    #     #print(filename, os.path.splitext(filename))
    #     f = os.path.join(pythonFrameworks, filename)
    #     if os.path.isfile(f):
    #         print("fix rpath python framework: ", f)
    #         subprocess.run(["install_name_tool", "-add_rpath", "@loader_path", f])
            
    # --- ajout du rpath framework pour les librairies de python 
    
    print(" --- Python libs: add rpath to Frameworks, nb libs: ", len(PythonLibs))
    dirPythonLibs = embeddedPythonLibs.split("/")
    deepSP = len(dirPythonLibs)
    #print("deepSP:", deepSP)             
    for filename in PythonLibs:
        dirFSP = filename.split("/")
        deepLibSP = len(dirFSP) - (deepSP)
        #print("fix rpath python libs:",  deepLibSP, filename)
        rpath = "@loader_path/../../../"
        for i in range(deepLibSP):
            rpath += "../"
        rpath += "Frameworks"
        subprocess.run(["install_name_tool", "-add_rpath", rpath, filename])
    
    # --- correction des rpath pour les dépendances en @executable_path 
           
    # for maintar in libexfound:
    #     base = maintar[0]
    #     target = maintar[1]
    #     if os.path.isfile(os.path.join(pythonFrameworks, base)):
    #        print("modify @executable_path en @rpath: ",os.path.join(pythonFrameworks, base))
    #        subprocess.run(["install_name_tool", "-change", "@executable_path/"+target, "@rpath/"+target, os.path.join(pythonFrameworks, base)])
    
    print("=================== Python app end   =============================")

print("=================== CloudCompare app begin =============================")
# --- CloudCompare: recherche des dependances de librairies 
libsToCheck = [mainprg]                  # on amorce la recherche recusive de dépendances avec les executables
libsfound = []
libexfound = []
libsInPlugins = []

# --- inventaire des librairies du framework pour la recherche de dépendances
libsInFrameworks = os.listdir(absFrameworksPath)
for filename in libsInFrameworks:
    f = os.path.join(absFrameworksPath, filename)
    libsToCheck.append(f)
print("number of libs in Frameworks: ", len(libsInFrameworks))

# --- inventaire des librairies dans plugins pour la recherche de dépendances
for dir in os.listdir(absPluginPath):
    absdir =os.path.join(absPluginPath, dir)
    if os.path.isdir(absdir) and not '.app' in dir:
        for filename in os.listdir(absdir):
            f = os.path.join(absdir, filename)
            #print("f0:",f)
            if os.path.isfile(f) and (os.path.splitext(f)[1] == '.dylib' or os.path.splitext(f)[1] == '.so'):
                libsToCheck.append(f)
                libsInPlugins.append(f)
print("number of libs in PlugIns: ", len(libsInPlugins))

# --- parcours pour la recherche de dépendances
while len(libsToCheck):
    
    # --- on dépile une lib et on regarde si on l'a déjà traitée
    lib2check = libsToCheck.pop(0)        # on sort la lib de la liste à tester
    if not lib2check in libsfound:        
        libsfound.append(lib2check)       # ajout des nouvelles lib à la liste de lib trouvées
    else:
        continue                          # lib déjà traitée
    
    # --- recherche des dépendances en @rpath et @executable_path
    libs, libex = getlibs(lib2check)
    #print("lib2check: ", lib2check, " libs:", libs, " libex:", libex)
    for maintar in libex:
        if not maintar in libexfound:
            libexfound.append(maintar)            # ajout des dependances en @executable_path dans une liste séparée

    rpaths = getrpath(lib2check)                  # on récupere la liste des rpath utilisée par la lib
    #print("   rpaths:", rpaths)

    absrpaths = convertRpaths(lib2check, rpaths)  # on convertit les rpath relatifs en absolus
    if not condaPath in absrpaths:                # on a recopié des libs python (site-packages)
        absrpaths.append(condaPath)
    if not fbxPath in absrpaths:                  # cas particulier
        absrpaths.append(fbxPath)
    #print("   absrpaths:", absrpaths)
    
    for lib in libs:                              # parcours des lib en dependance rpath
        #print("    --- lib:", lib)
        for absrp in absrpaths:                   # on parcourt les repertoires rpath pour trouver si la lib existe

            alib = os.path.join(absrp, lib)
            if os.path.isfile(alib):
                #print("      exist:",alib)
                if not alib in libsToCheck and not alib in libsfound:
                    libsToCheck.append(alib)      # si c'est une nouvelle lib, on l'ajoute à la liste à traiter
                break

# --- recopie des librairies identifiées comme dépendance dans le framework, si elles ne sont pas déjà présentes dans le bundle
print("libexfound to add to Frameworks: ",libexfound)

libsfound.sort()             
print("libsfound to add to Frameworks: ", len(libsfound))

nbLibsAdded = 0
for lib in libsfound:
    if lib == mainprg:
        continue
    base = os.path.basename(lib)
    if (base not in libsInFrameworks) and (lib not in libsInPlugins):
        #print("copy:",lib)
        shutil.copy2(lib, absFrameworksPath)
        nbLibsAdded +=1
print("number of libs added to Frameworks: ", nbLibsAdded)

# --- ajout des rpath pour les librairies du framework : framework et ccPlugins
print(" --- Frameworks libs: add rpath to Frameworks")
nbFrameworksLibs = 0
for filename in os.listdir(absFrameworksPath):
    #print(filename, os.path.splitext(filename))
    f = os.path.join(absFrameworksPath, filename)
    if os.path.isfile(f) and os.path.splitext(f)[1] == '.so':
        nbFrameworksLibs += 1
        #print("fix rpath framework: ", f)
        subprocess.run(["install_name_tool", "-add_rpath", "@loader_path", f])
    elif os.path.isfile(f) and os.path.splitext(f)[1] == '.dylib':
        nbFrameworksLibs += 1
        #print("fix rpath framework: ", f)
        subprocess.run(["install_name_tool", "-add_rpath", "@loader_path", f])
print("number of Frameworks libs with rpath modified: ", nbFrameworksLibs)

# --- ajout du rpath framework pour les librairies des Plugins

print(" --- PlugIns libs: add rpath to Frameworks, number of libs: ", len(libsInPlugins))
for f in libsInPlugins:
    if os.path.isfile(f):
        #print("fix rpath framework: ", f)        
        subprocess.run(["install_name_tool", "-add_rpath", "@loader_path/../../Frameworks", f])

for maintar in libexfound:
    base = maintar[0]
    target = maintar[1]
    if os.path.isfile(os.path.join(absFrameworksPath, base)):
       print("modify @executable_path en @rpath: ",os.path.join(absFrameworksPath, base))
       subprocess.run(["install_name_tool", "-change", "@executable_path/"+target, "@rpath/"+target, os.path.join(absFrameworksPath, base)])
    elif os.path.isfile(os.path.join(absPluginPath+'/ccPlugins', base)):
       print("modify @executable_path en @rpath: ",os.path.join(absPluginPath+'/ccPlugins', base))
       subprocess.run(["install_name_tool", "-change", "@executable_path/"+target, "@rpath/"+target, os.path.join(absPluginPath+'/ccPlugins', base)])

print("=================== CloudCompare app end   =============================")


with open(os.path.join(rootdir, 'dependancies.json'), 'w', encoding="utf-8") as f:
    json.dump(dependancies, f, sort_keys=True, indent=4)

